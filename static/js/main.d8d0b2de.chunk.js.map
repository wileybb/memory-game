{"version":3,"sources":["components/PictureCard.js","components/Header.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["PictureCard","props","item","clicked","matched","react_default","a","createElement","className","onClick","handleClick","src","image","Header","text","score","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffleData","data","i","length","j","Math","floor","random","temp","state","headerText","lastClickedType","lastClickedToken","pictures","timeOut","bind","assertThisInitialized","componentDidMount","resetGame","shuffledHiddenPictures","map","setState","_this2","setTimeout","prevState","clickedItem","_this3","console","log","typeId","tokenId","updatedPictures","hiddenPictures","hideWrongGuessAfterTimeout","_this4","pictureArray","components_PictureCard","components_Header","React","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8d0b2de.chunk.js","sourcesContent":["import React from \"react\"\n\n\nfunction PictureCard(props) {\n\n\n    if(props.item.clicked === true || props.item.matched === true){\n        return(\n            \n            <div className=\"pictureCard\">\n                <img \n                    onClick={()=>props.handleClick(props.item)} \n                    src={props.item.image}\n                />\n            \n            </div>\n        )\n    } else {\n        return(\n            <div className=\"pictureCard\">\n                <img\n                    className ={props.item.clicked?'fadeIn':'fadeOut'}\n                    onClick={()=>props.handleClick(props.item)} \n                    src={props.item.image}\n                    // style={{opacity: .25}}\n                />\n            </div>\n        )\n    }\n}\n\nexport default PictureCard","import React from \"react\"\n\nfunction Header (props) {\n    return(\n        <div>\n            <h1>Memory Game</h1>\n            <h2>{props.text}</h2>\n            <h3>Matches Found: {props.score}/10</h3>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\"\nimport data from \"../data.json\"\nimport PictureCard from \"./PictureCard\"\nimport Header from \"./Header\"\n\nclass Board extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            headerText: \"Click a card to reveal an image\",\n            lastClickedType: null,\n            lastClickedToken: null,\n            pictures: data,\n            score: 0,\n            timeOut: false,\n\n        }\n        this.handleClick = this.handleClick.bind(this)\n        this.componentDidMount = this.componentDidMount.bind(this)\n        this.resetGame = this.resetGame.bind(this)\n    }\n    resetGame() {\n        // const shuffledPictures = this.shuffleData(data)\n    \n        const shuffledHiddenPictures = this.shuffleData(data).map(item => {\n            item.clicked = false\n            item.matched = false\n            return item\n        })\n        \n        this.setState({ \n            pictures: shuffledHiddenPictures,\n            lastClickedType: null,\n            lastClickedToken: null,\n            score: 0,\n            headerText: \"Click a card to reveal an image\"\n\n        });\n    }\n    componentDidMount() {\n        this.resetGame()\n    }\n\n    shuffleData = data => {\n        let i = data.length - 1;\n        while (i > 0) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = data[i];\n          data[i] = data[j];\n          data[j] = temp;\n          i--;\n        }\n        return data;\n    };\n    hideWrongGuessAfterTimeout(){\n        setTimeout(() => this.setState(prevState=>{\n            const hidePictures = prevState.pictures.map(item => {\n                item.clicked = false\n                return item\n            })\n            return{\n                pictures: hidePictures,\n                timeOut: false\n            }\n        }), 2000);\n    }\n\n    handleClick(clickedItem) {\n        console.log(clickedItem.typeId)\n        console.log(clickedItem.tokenId)\n        // if(this.state.lastClickedToken === null){\n        //     console.log(\"first guess\")\n        // } else {\n        //     console.log(\"second guess\")\n        // }\n        if(!this.state.timeOut && !(this.state.lastClickedToken === clickedItem.tokenId)){\n            this.setState(prevState=>{\n                const updatedPictures = prevState.pictures.map(item => {\n                    if(item.tokenId === clickedItem.tokenId) {\n                        item.clicked = !item.clicked\n                    }\n                    return item\n                })\n                if(prevState.lastClickedToken === null){\n                    // it is the players first guess... \n                    return {\n                        headerText: \"Try to find a match...\",\n                        lastClickedType: clickedItem.typeId,\n                        lastClickedToken: clickedItem.tokenId,\n                        pictures: updatedPictures,\n                        score: prevState.score\n                    }\n                }else {\n                    //it is the players second guess...\n\n                    let hiddenPictures = []\n                    if(prevState.lastClickedType === clickedItem.typeId && prevState.lastClickedToken !== clickedItem.tokenId){\n                        //in the case the second guess was correct...\n                        hiddenPictures = prevState.pictures.map(item => {\n                            item.clicked = false\n                            if(item.typeId === clickedItem.typeId){\n                                item.matched = true\n                            }\n                            return item\n                        })\n                        if(prevState.score === 9){\n                            return{\n                                headerText: \"You Win!\",\n                                lastClickedToken: null,\n                                lastClickedType: null,\n                                pictures: hiddenPictures,\n                                score: 10\n                            }\n                        }else{\n                            return { \n                                headerText: \"You found a match!\",\n                                lastClickedToken: null,\n                                lastClickedType: null,\n                                pictures: hiddenPictures,\n                                score: prevState.score + 1\n                            }\n                        }   \n                    } else {\n                        //in the case the second guess was incorrect...\n                \n\n                                hiddenPictures = prevState.pictures.map(item => {\n                                    if(item.tokenId === clickedItem.tokenId){\n                                        item.clicked = true\n                                    }\n                                    return item\n                                })\n\n                                this.hideWrongGuessAfterTimeout()\n                    \n                                return {\n                                    headerText: \"Try again\",\n                                    lastClickedToken: null,\n                                    lastClickedType: null,\n                                    pictures: hiddenPictures,\n                                    score: prevState.score,\n                                    timeOut: true\n                                }\n                                \n                        \n                        \n                    }\n\n                }\n\n                \n                    \n                \n\n            })\n        }\n    }\n\n    render() {\n\n        let pictureArray = data.map(item => {\n            return(\n                <div>\n                    <PictureCard item={item} handleClick={this.handleClick}/>\n                </div>\n            )\n        })\n\n        return(\n            <div>\n                <nav>\n                    <Header text={this.state.headerText} score={this.state.score} />\n                    <button onClick={this.componentDidMount}>Reset Game</button>\n                </nav>\n                <container>\n                    {pictureArray}\n                </container>\n            </div>\n        )\n    }\n}\n\nexport default Board\n\n","import React, { Component } from \"react\"\nimport Board from \"./components/Board\"\nclass App extends Component {\n  render() {\n    return (\n        <Board />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}